<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:cp="components.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="{expandingText.width+10}" height="{expandingText.height+OFFSET_HEIGHT}" creationComplete="init()"
		 borderColor="0xE3E3E3" borderStyle="solid" borderVisible="false" borderWeight="1" cornerRadius="4"
		 focusOut="bordercontainer1_focusOutHandler(event)" focusIn="bordercontainer1_focusInHandler(event)"
		 mouseOver="bordercontainer1_mouseOverHandler(event)" mouseOut="bordercontainer1_mouseOutHandler(event)"
		 backgroundAlpha="{konNoteBackgroundAlpha}">
	<fx:Script>
		<![CDATA[
			import mx.managers.FocusManager;
			
			private static const OFFSET_HEIGHT:int = 10;
			public static const REMOVE_KON_NOTE:String = "removeKonNoteEvent";
			public static const FOCUS_KON_NOTE:String = "focusKonNoteEvent";
			
			private var inFocus:Boolean = false;
			private var initPos:Number;
			private var tempOffset:Number;
			[Bindable]
			private var konNoteBackgroundAlpha:Number = 0.0;
			
			protected function init():void {
				callLater(expandingText.setFocus);
				inFocus = true;
			}

			protected function bordercontainer1_focusOutHandler(event:FocusEvent):void {
				if(expandingText.text=="") {
					this.dispatchEvent(new Event(REMOVE_KON_NOTE,true));
				}
				else {
					inFocus = false;
					setInactive();
					//
					// call graphic object's save function to save data.
					//
				}
			}
			
			protected function bordercontainer1_focusInHandler(event:FocusEvent):void {
				inFocus = true;
				this.dispatchEvent(new Event(FOCUS_KON_NOTE,true));
				setActive();
			}
			
			protected function changeWidthButton_mouseOverHandler(event:MouseEvent):void {
				setActive();
				Mouse.cursor = Kursers.HORIZONTAL_RESIZE;
				event.stopPropagation();
			}
			
			protected function changeWidthButton_mouseOutHandler(event:MouseEvent):void {
				setInactive();
				event.stopPropagation();
			}
			
			protected function titleGroup_mouseOverHandler(event:MouseEvent):void {
				setActive();
				Mouse.cursor = Kursers.MOVE;
				event.stopPropagation();
			}
			
			protected function titleGroup_mouseOutHandler(event:MouseEvent):void {
				setInactive();
				event.stopPropagation();
			}
			
			protected function bordercontainer1_mouseOverHandler(event:MouseEvent):void {
				setActive();
				Mouse.cursor = Kursers.TEXT_SELECT;
				event.stopPropagation();
			}
			
			protected function bordercontainer1_mouseOutHandler(event:MouseEvent):void {
				setInactive();
				event.stopPropagation();
			}
			
			private function setActive():void {
				this.setStyle("borderVisible",true);
				titleGroup.visible = true;		
				konNoteBackgroundAlpha = 0.5;
			}
			private function setInactive():void {
				if(inFocus == false) {
					this.setStyle("borderVisible",false);
					titleGroup.visible = false;
					konNoteBackgroundAlpha = 0.0;
				}
			}
			
			protected function changeWidthButton_mouseDownHandler(event:MouseEvent):void {
				initPos = stage.mouseX;
				stage.addEventListener(MouseEvent.MOUSE_MOVE,changeWidthButton_mouseMoveHandler);
				stage.addEventListener(MouseEvent.MOUSE_UP,changeWidthButton_mouseUpHandler);
			}
			
			protected function changeWidthButton_mouseMoveHandler(event:MouseEvent):void {
				tempOffset = stage.mouseX - initPos;
				if(expandingText.width+tempOffset>=150) {
					initPos = stage.mouseX;
					expandingText.width += tempOffset;
				}
			}
			protected function changeWidthButton_mouseUpHandler(event:MouseEvent):void {
				stage.removeEventListener(MouseEvent.MOUSE_MOVE,changeWidthButton_mouseMoveHandler);
				stage.removeEventListener(MouseEvent.MOUSE_UP,changeWidthButton_mouseUpHandler);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Group  height="8" width="100%" id="titleGroup" top="0" visible="false"
			  mouseOver="titleGroup_mouseOverHandler(event)"
			  mouseOut="titleGroup_mouseOutHandler(event)"
			  mouseDown="{this.startDrag(false,new Rectangle(0,0,this.parent.width-this.width,this.parent.height-this.height));this.setFocus();}"
			  mouseUp="{this.stopDrag();}">
		<s:Rect height="8" width="100%" id="titleRect" top="0">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:entries>
						<s:GradientEntry color="0xE3E3E3" ratio="0" alpha="0.5" />
						<s:GradientEntry color="0x363636" ratio="0.9" alpha="0.5" />
					</s:entries>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
	</s:Group>
	<cp:ExpandingTextArea id="expandingText"
						  borderVisible="false"
						  contentBackgroundAlpha="{konNoteBackgroundAlpha}"
						  width="302"
						  left="2" bottom="0"
						  height="{this.height - OFFSET_HEIGHT}"
						  focusAlpha="0"/>
	<s:Button id="changeWidthButton" height="100%" 
			  width="4" bottom="0"
			  alpha="0" right="0"
			  mouseOver="changeWidthButton_mouseOverHandler(event)"
			  mouseOut="changeWidthButton_mouseOutHandler(event)"
			  mouseDown="changeWidthButton_mouseDownHandler(event)"
			  />
</s:BorderContainer>
